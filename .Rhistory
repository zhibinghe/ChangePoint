devtool::documents()
devtools::documents()
devtools::document()
l = 1200
h = seq(150,by=150,length.out=6)
jump = rep(0,7)
beta1 = c(2,-1,2.5,-3,-0.2,2.5)/50
beta1 = c(beta1,-sum(beta1*(c(h[1],diff(h))))/(l-tail(h,1)))
signal = gen.signal(l,h,jump,beta1)
noise = rnorm(length(signal),0,1)
gamma = 25
sdata = smth.gau(signal+noise,gamma)
ddy = diff(sdata,differences=2)
est.sigma2(ddy,gamma,0.5)
est.sigma2()
est.sigma2
3/(8*sqrt(pi)*gamma^5)
est.sigma2(ddy,gamma,1)
est.sigma2(ddy,gamma,0.8)
est.sigma2(ddy,gamma,0.4)
est.sigma2(ddy,gamma,0.2)
est.sigma2(ddy,gamma,0.05)
est.sigma2(ddy,gamma,1)
est.sigma2(ddy,gamma,2)
est.sigma2 = function(x,gamma,k=0.5){
lmax = which.peaks(x); lmin = which.peaks(x,decreasing=T)
J = c(x[lmax],-x[lmin])
ind = c(lmax,lmin)[J>= mean(J)+k*sd(J)]
delete = function(y){
v=vector()
for(i in 1:length(y)){
v1 = (y[i]-4*gamma) : (y[i]+4*gamma)
v = append(v,v1)
}
intersect(1:length(x),unique(v))
}
var2d = var(x[-delete(ind)])
return(1/(2*sqrt(pi)*(3/(8*sqrt(pi)*var2d))^(1/5)))
}
est.sigma2(ddy,gamma)
1/(2*sqrt(pi)*gamma)
noise = rnorm(length(signal),0,2)
gamma = 25
sdata = smth.gau(signal+noise,gamma)
ddy = diff(sdata,differences=2)
est.sigma2(ddy,gamma)
?rnorm
1/(2*sqrt(pi)*sqrt(gamma^2+4))
Fdr = function(uh,th,b){
confband = function(th,b) unique(unlist(lapply(th,function(x){seq(ceiling(x-b),floor(x+b))})))
if (length(uh)==0) {
FDR = 0
Power = 0}
else{
n.tp = sum(uh %in% confband(th,b))
FDR = 1 - n.tp/length(uh)
Power = min(n.tp/length(th),1)
}
data.frame(matrix(c(FDR,Power),nrow=1,dimnames=list(NULL,c("FDR","Power"))))
}
Fdr(uh=c(7,15,32,47),th=c(10,20,30,40,50),b=4)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
Fdr = function(uh,th,b){
confband = function(th,b) unique(unlist(lapply(th,function(x){seq(ceiling(x-b),floor(x+b))})))
if (length(uh)==0) {
FDR = 0
Power = 0}
else{
n.tp = sum(uh %in% confband(th,b))
FDR = 1 - n.tp/length(uh)
Power = min(n.tp/length(th),1)
}
return(data.frame(matrix(c(FDR,Power),nrow=1,dimnames=list(NULL,c("FDR","Power")))))
}
Fdr(uh=c(7,15,32,47),th=c(10,20,30,40,50),b=4)
devtools::document()
devtools::document()
source('~/Documents/R/dSTEM/R/main.R')
devtools::document()
signal = gen.signal(l,h,jump,beta1)
l = 1200
h = seq(150,by=150,length.out=6)
jump = rep(0,7)
beta1 = c(2,-1,2.5,-3,-0.2,2.5)/50
beta1 = c(beta1,-sum(beta1*(c(h[1],diff(h))))/(l-tail(h,1)))
signal = gen.signal(l,h,jump,beta1)
l = 1200
h = seq(150,by=150,length.out=6)
jump = rep(0,7)
beta1 = c(2,-1,2.5,-3,-0.2,2.5)/50
beta1 = c(beta1,-sum(beta1*(c(h[1],diff(h))))/(l-tail(h,1)))
signal = gen.signal(l,h,jump,beta1)
# Gaussian kernel
.kern = function(x,v=1){
temp = exp(-x^2/(2*v^2))
return(temp/sum(temp))
}
#' Simulate different types of signal
#'
#' @param l length of data, if data is periodic then the length of period
#' @param h numerical vector of change-point locations
#' @param jump vector of jump values at change-point locations
#' @param b1 vector of piecewise slopes
#' @param rep number of periods if data is periodic
#' @param shift vector of vertical shifts for each period
#'
#' @return a vector of simulated signal
#' @examples
#' l = 1200
#' h = seq(150,by=150,length.out=6)
#' jump = rep(0,7)
#' beta1 = c(2,-1,2.5,-3,-0.2,2.5)/50
#' beta1 = c(beta1,-sum(beta1*(c(h[1],diff(h))))/(l-tail(h,1)))
#' signal = gen.signal(l,h,jump,beta1)
gen.signal = function(l,h,jump,b1,rep,shift){
if(missing(rep)) rep = 1
if(missing(shift)) shift = 0
if(length(rep)!=length(shift)) stop("rep and shift should have the same length")
if(h[length(h)] > l) stop("h should not be greater than l")
if(length(jump)!=length(b1) | length(jump)!= length(h)+1)
stop("Length of jump or b1 is not matched with the length of h")
f = function(b0){
s = vector();t = 1:l
for(i in 1:(length(h)+1)){
nn = ifelse(i==1,h[i],ifelse(i==(length(h)+1),l-h[i-1],h[i]-h[i-1]))
start = ifelse(i==1,1,h[i-1]+1)
end = ifelse(i==(length(h)+1),l,h[i])
temp = rep(b0[i],nn) + rep(b1[i],nn)*t[start:end]
s = append(s,temp)
}
return(s)
}
b0 = cumsum(c(jump[1],-diff(b1)*h+jump[-1]))
return(rep(f(b0),rep)+rep(shift,each=l))
}
l = 1200
h = seq(150,by=150,length.out=6)
jump = rep(0,7)
beta1 = c(2,-1,2.5,-3,-0.2,2.5)/50
beta1 = c(beta1,-sum(beta1*(c(h[1],diff(h))))/(l-tail(h,1)))
signal = gen.signal(l,h,jump,beta1)
signal
devtools::document()
devtools::document()
devtools::document()
smth.gau(rnorm(1000),20)
